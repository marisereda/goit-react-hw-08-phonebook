{"version":3,"file":"static/js/712.4a853aa0.chunk.js","mappings":"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","sources":["components/Button.jsx","components/HeadingSection.jsx","components/Input.jsx","hooks/useMyToast.js","components/FormLabel.jsx","components/ContactForm.jsx","components/Contact.jsx","components/Filter.jsx","components/ContactList.jsx","components/Dialog.jsx","pages/PhoneBook.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Button as ButtonChakra } from '@chakra-ui/react';\n\nexport const Button = ({ type, children, isLoading, loadingText }) => {\n  return (\n    <ButtonChakra\n      type={type}\n      isLoading={isLoading}\n      loadingText={loadingText}\n      colorScheme=\"accent\"\n      bg=\"accent.400\"\n      fontWeight=\"bold\"\n      minW=\"10rem\"\n    >\n      {children}\n    </ButtonChakra>\n  );\n};\n\nButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string.isRequired,\n};\n","import { Heading } from '@chakra-ui/react';\n\nexport const HeadingSection = ({ children, ...props }) => {\n  return (\n    <Heading\n      as=\"h2\"\n      fontSize=\"2xl\"\n      textAlign=\"center\"\n      color=\"gray.600\"\n      {...props}\n    >\n      {children}\n    </Heading>\n  );\n};\n","import {\n  Input as InputChakra,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ name = '', type = 'text', icon }) => {\n  return (\n    <InputGroup>\n      <InputLeftElement pointerEvents=\"none\" children={icon} />\n      <Field\n        as={InputChakra}\n        name={name}\n        type={type}\n        paddingLeft=\"9\"\n        fontSize=\"lg\"\n        fontWeight=\"bold\"\n        color=\"gray.600\"\n        variant=\"outline\"\n        bg=\"bg.50\"\n        borderColor=\"gray.400\"\n        focusBorderColor=\"brand.600\"\n      />\n    </InputGroup>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  icon: PropTypes.node,\n};\n","import { useToast, Box } from '@chakra-ui/react';\n\nexport const useMyToast = () => {\n  const toast = useToast({\n    title: ``,\n    position: 'top-right',\n    duration: 5000,\n    isClosable: true,\n  });\n  return ({ description, status }) => {\n    toast({\n      render: () => (\n        <Box\n          color=\"white\"\n          p={3}\n          borderRadius=\"4\"\n          textAlign=\"center\"\n          bg={status === 'error' ? 'accent.500' : 'brand.500'}\n        >\n          {description}\n        </Box>\n      ),\n    });\n  };\n};\n","import { FormLabel as FormLabelChakra } from '@chakra-ui/react';\n\nexport const FormLabel = ({ children }) => {\n  return (\n    <FormLabelChakra color=\"brand.600\" fontWeight=\"bold\">\n      {children}\n    </FormLabelChakra>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { ImUser } from 'react-icons/im';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { Icon } from '@chakra-ui/react';\nimport { FormControl, FormErrorMessage, VStack } from '@chakra-ui/react';\n\nimport { HeadingSection } from 'components/HeadingSection';\nimport { Button } from 'components/Button';\nimport { Input } from 'components/Input';\nimport { FormLabel } from 'components/FormLabel';\nimport { selectors } from 'redux/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nlet schema = yup.object().shape({\n  name: yup.string().required('Contact name is required'),\n  number: yup\n    .string()\n    .min(7, 'At least 7 digits is required')\n    .max(12, 'At most 12 digits is required')\n    .required('Phone number is required'),\n});\n\n// ---------------- Component ContactForm function ----------------\n\nexport const ContactForm = ({ saveContact }) => {\n  const addContactIsLoading = useSelector(selectors.addContactIsLoading);\n\n  // ---------------- Handle Submit ----------------\n  const handleSubmit = (values, { resetForm }) => {\n    saveContact({\n      name: values.name.trim(),\n      number: values.number.trim(),\n    });\n\n    resetForm();\n  };\n\n  // ---------------- Return ----------------\n  return (\n    <VStack\n      as=\"section\"\n      py=\"10\"\n      px=\"16\"\n      bg=\"bg.100\"\n      align=\"stretch\"\n      justify=\"center\"\n      spacing={6}\n    >\n      <HeadingSection>Phonebook</HeadingSection>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        {({ handleSubmit, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={6} mx=\"auto\" maxW=\"sm\">\n              <FormControl isInvalid={errors.name}>\n                <FormLabel>Name</FormLabel>\n                <Input\n                  name=\"name\"\n                  type=\"text\"\n                  icon={<Icon as={ImUser} color=\"brand.600\" boxSize=\"6\" />}\n                />\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n              <FormControl isInvalid={errors.number}>\n                <FormLabel>Number</FormLabel>\n                <Input\n                  name=\"number\"\n                  type=\"tel\"\n                  icon={<PhoneIcon color=\"brand.600\" boxSize=\"5\" />}\n                />\n                <FormErrorMessage>{errors.number}</FormErrorMessage>\n              </FormControl>\n\n              <Button\n                type=\"submit\"\n                isLoading={addContactIsLoading}\n                loadingText=\"Adding\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </VStack>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DeleteIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { Flex, Text, IconButton, Spinner } from '@chakra-ui/react';\nimport { deleteContact } from 'redux/operations';\nimport { selectors } from 'redux/selectors';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectors.isLoading);\n\n  return (\n    <Flex align=\"center\" gap=\"2\" as=\"li\">\n      <PhoneIcon boxSize={5} color=\"accent.400\" />\n      <Text flexGrow=\"1\" fontSize=\"xl\" fontWeight=\"bold\" color=\"gray.600\">\n        {name}:\n      </Text>\n      <Text fontSize=\"xl\" color=\"gray.600\">\n        {number}\n      </Text>\n      <IconButton\n        name={id}\n        type=\"button\"\n        aria-label=\"Remove contact\"\n        onClick={() => dispatch(deleteContact(id))}\n        color=\"brand.600\"\n        bg=\"transparent\"\n        icon={\n          isLoading ? (\n            <Spinner\n              thickness=\"4px\"\n              speed=\"0.65s\"\n              emptyColor=\"gray.200\"\n              color=\"brand.600\"\n              size=\"md\"\n            />\n          ) : (\n            <DeleteIcon boxSize={6} />\n          )\n        }\n      />\n    </Flex>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { VStack, FormControl, Input } from '@chakra-ui/react';\nimport { FormLabel } from 'components/FormLabel';\nimport { changeFilter } from 'redux/filterSlice';\nimport { selectors } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectors.filter);\n  const dispatch = useDispatch();\n\n  // ---------------- handleFilterChange ----------------\n  const handleFilterChange = e => {\n    const currentValue = e.target.value.toLowerCase().trim();\n\n    dispatch(changeFilter(currentValue));\n  };\n\n  // --------------------------------\n  return (\n    <VStack align=\"start\" minW=\"sm\">\n      <FormControl>\n        <FormLabel>Find contacts by name</FormLabel>\n        <Input\n          name=\"filter\"\n          onChange={handleFilterChange}\n          value={filterValue}\n          fontSize=\"lg\"\n          fontWeight=\"bold\"\n          color=\"gray.600\"\n          variant=\"outline\"\n          bg=\"bg.50\"\n          borderColor=\"gray.400\"\n          focusBorderColor=\"brand.600\"\n        />\n      </FormControl>\n    </VStack>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { VStack } from '@chakra-ui/react';\n\nimport { Contact } from 'components/Contact';\nimport { Filter } from 'components/Filter';\nimport { HeadingSection } from 'components/HeadingSection';\nimport { selectContacts } from 'redux/contactsSlice';\nimport { fetchContacts } from 'redux/operations';\nimport { selectors } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectors.filter);\n  const dispatch = useDispatch();\n\n  // --------------------------------\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // --------------------------------\n  const getFilteredContacts = () => {\n    return filterValue\n      ? contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filterValue)\n        )\n      : contacts;\n  };\n\n  // --------------------------------\n  return (\n    <VStack\n      as=\"section\"\n      justify=\"start\"\n      align=\"center\"\n      flexGrow=\"1\"\n      spacing=\"6\"\n      px=\"16\"\n      py=\"10\"\n      bg=\"bg.50\"\n    >\n      <HeadingSection>Contacts</HeadingSection>\n      <Filter />\n      <VStack as=\"ul\" alignItems=\"stretch\" alignSelf=\"stretch\">\n        {getFilteredContacts().map(({ id, name, number }) => (\n          <Contact key={id} id={id} name={name} number={number} />\n        ))}\n      </VStack>\n    </VStack>\n  );\n};\n","import { useRef } from 'react';\n\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Button,\n  Text,\n} from '@chakra-ui/react';\n\nexport const Dialog = ({ isOpen, name, onClose }) => {\n  const cancelRef = useRef();\n\n  //---------------- Handlers ----------------\n  const handleCancel = () => {\n    onClose(false);\n  };\n  const handleConfirm = () => {\n    onClose(true);\n  };\n\n  //---------------- Return ----------------\n  return (\n    <AlertDialog\n      isOpen={isOpen}\n      leastDestructiveRef={cancelRef}\n      onClose={onClose}\n    >\n      <AlertDialogOverlay>\n        <AlertDialogContent bg=\"bg.50\">\n          <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\" as=\"h3\">\n            Update Contact\n          </AlertDialogHeader>\n\n          <AlertDialogBody as=\"p\">\n            <Text as=\"b\">{name}</Text> is in the cotacts already. Do you want to\n            update the contact?\n          </AlertDialogBody>\n\n          <AlertDialogFooter>\n            <Button\n              ref={cancelRef.current}\n              onClick={handleCancel}\n              variant=\"outline\"\n            >\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"accent\"\n              bg=\"accent.400\"\n              onClick={handleConfirm}\n              ml={3}\n            >\n              Update\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialogOverlay>\n    </AlertDialog>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { VStack } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Dialog } from 'components/Dialog';\nimport { selectContacts } from 'redux/contactsSlice';\nimport { addContact, updateContact } from 'redux/operations';\nimport { useMyToast } from 'hooks/useMyToast';\n\nconst PhoneBook = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useMyToast();\n  const [addingContact, setAddingContact] = useState({\n    id: '',\n    name: '',\n    number: '',\n  });\n  const [showDialog, setShowDialog] = useState(false);\n\n  //---------------- Save Contact function ----------------\n  const saveContact = ({ name, number }) => {\n    const seekingName = name.toLowerCase();\n    const foundContact = contacts.find(\n      contact => contact.name.toLowerCase().trim() === seekingName\n    );\n\n    //  ==== there is no contact in contacts -> add contact\n    if (!foundContact) {\n      dispatch(addContact({ name, number }));\n      return;\n    }\n\n    //  ==== there is contact in contacts -> show info & do nothing\n    if (foundContact.number === number.trim()) {\n      toast({\n        description: `${name} is already in contacts!`,\n        status: 'info',\n      });\n      return;\n    }\n\n    //  ==== there is contact in contacts -> update contact? (show dialog)\n    setAddingContact({ id: foundContact.id, name, number });\n    setShowDialog(true);\n  };\n\n  //---------------- onClose Dialog ----------------\n\n  const onCloseDialog = isConfirmed => {\n    setShowDialog(false);\n    if (isConfirmed) {\n      const { id, name, number } = addingContact;\n      dispatch(updateContact({ id, name, number }));\n    }\n  };\n\n  return (\n    <VStack as=\"main\" justify=\"start\" align=\"stretch\" spacing=\"0\" flexGrow=\"1\">\n      <ContactForm saveContact={saveContact} />\n      <ContactList />\n      <Dialog\n        name={addingContact.name}\n        isOpen={showDialog}\n        onClose={onCloseDialog}\n      />\n    </VStack>\n  );\n};\n\nexport default PhoneBook;\n"],"names":["Button","type","children","isLoading","loadingText","colorScheme","bg","fontWeight","minW","HeadingSection","props","as","fontSize","textAlign","color","Input","name","icon","pointerEvents","InputChakra","paddingLeft","variant","borderColor","focusBorderColor","useMyToast","toast","useToast","title","position","duration","isClosable","description","status","render","p","borderRadius","FormLabel","initialValues","number","schema","yup","shape","required","min","max","ContactForm","saveContact","addContactIsLoading","useSelector","selectors","py","px","align","justify","spacing","onSubmit","values","resetForm","trim","validationSchema","handleSubmit","errors","mx","maxW","isInvalid","I","ImUser","boxSize","Contact","id","dispatch","useDispatch","gap","flexGrow","onClick","deleteContact","thickness","speed","emptyColor","size","Filter","filterValue","onChange","e","currentValue","target","value","toLowerCase","changeFilter","ContactList","contacts","selectContacts","useEffect","fetchContacts","alignItems","alignSelf","filter","contact","includes","map","Dialog","isOpen","onClose","cancelRef","useRef","leastDestructiveRef","ref","current","ml","useState","addingContact","setAddingContact","showDialog","setShowDialog","seekingName","foundContact","find","addContact","isConfirmed","updateContact"],"sourceRoot":""}